=provide(:title, "#{@matrix.group}/#{@matrix.name}")
%h1= "#{@matrix.group}/#{@matrix.name}"

.table-responsive
%table{:class => "table table-striped"}
  %tbody
    %tr
      %th Group
      %td{width: 600}= @matrix.group
      %td{rowspan: 10}
        .pull-right.img-responsive= image_tag "#{Matrix.get_base_url}matrices/#{@matrix.group}/#{@matrix.name}.png"
    %tr
      %th Name
      %td= @matrix.name
    %tr
      %th Num Rows
      %td= number_with_delimiter(@matrix.num_rows, :delimiter => ',')
    %tr
      %th Num Cols
      %td= number_with_delimiter(@matrix.num_cols, :delimiter => ',')
    %tr
      %th Nonzeros
      %td= number_with_delimiter(@matrix.nonzeros, :delimiter => ',')
    %tr
      %th Kind
      %td= @matrix.kind.titleize.gsub(/2\sD/, '2D').gsub(/3\sD/, '3D') unless @matrix.kind.nil?
    %tr
      %th Symmetric
      %td= @matrix.structure == "symmetric" ? "Yes" : "No"
    %tr
      %th Date
      %td= @matrix.date
    %tr
      %th Author
      %td= @matrix.author
    %tr
      %th Editor
      %td= @matrix.editor
    %tr
      %th Notes
      %td{colspan: 2}
        - if @matrix.notes
          %pre= @matrix.notes
    %tr
      %th Download
      %td{colspan: 2} 
        = link_to "MATLAB", @matrix.get_url(:matlab), class: "btn btn-default"
        = link_to "Rutherford Boeing", @matrix.get_url(:rutherford_boeing), class: "btn btn-default"
        = link_to "Matrix Market", @matrix.get_url(:matrix_market), class: "btn btn-default"
    %tr
      %th Type
      %td{colspan: 2}= @matrix.rb_type

%table{:class => "table table-striped"}
  %tbody
    %tr
      %th{colspan:2} Ordering Statistics
    %tr
      %th nnz(chol(P*(A+A'+s*I)*P')) with AMD
      %td= number_with_delimiter(@matrix.nnz_chol, :delimiter => ',')
    %tr
      %th Cholesky flop count
      %td= @matrix.cholesky_flop_count
    %tr
      %th nnz(L+U), no partial pivoting, with AMD
      %td= number_with_delimiter(@matrix.nnz_L_plus_U, :delimiter => ',')
    %tr
      %th nnz(V) for QR, upper bound nnz(L) for LU, with COLAMD
      %td= number_with_delimiter(@matrix.nnz_v, :delimiter => ',')
    %tr
      %th nnz(R) for QR, upper bound nnz(U) for LU, with COLAMD
      %td= number_with_delimiter(@matrix.nnz_r, :delimiter => ',')
