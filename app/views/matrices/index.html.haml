=provide(:title, "Index")

:javascript
  jQuery(function( $ ){
      // Check if alert has been closed
      if( Cookies.get('about-box') === 'closed' ){
          $('.about-alert').hide();
      }
      $('.about-close').click(function( e ){
          // Do not perform default action when button is clicked
          e.preventDefault();
          Cookies.set('about-box', 'closed');
      });
  });
:javascript
  var options = [];
  // Select all links with the dropdown-menu class
  $( '.dropdown-menu a' ).on( 'click', function( event ) {

    var $target = $( event.currentTarget ),
        val = $target.attr( 'data-value' ),
        $inp = $target.find( 'input' ),
        idx;

    if ( ( idx = options.indexOf( val ) ) > -1 ) {
      options.splice( idx, 1 );
      setTimeout( function() { $inp.prop( 'checked', false ).change(); }, 0);
        //$inp.prop( 'checked', false );
      //$inp.click();
    } else {
      options.push( val );
      setTimeout( function() { $inp.prop( 'checked', true ).change(); }, 0);
        //$inp.prop( 'checked', true )
      //$inp.click();
    }

    $( event.target ).blur();

    console.log( options );
    return false;
  });

:javascript
  $(".filter-checkbox").change(function(){
    //window.alert("Checkbox Triggered");
    //window.alert($(this).data("target"));
    //window.alert(this);
    //window.alert(this.checked);
    if (this.checked) {
      $($(this).data("target")).show();

    } else {
      $($(this).data("target")).hide();
    }
  });

// Hide filters initially
:javascript
  $( document ).ready(function() {
    $(".filter").hide();
  });

.alert.alert-info.alert-dismissible.about-alert
  %button.close.about-close{:type => "button", :'data-dismiss' => "alert", :'aria-label' => "Close"}
    %span{:'aria-hidden' => "true"}
      &times;
  The SuiteSparse Matrix Collection (formerly the University of Florida Sparse Matrix Collection) is a widely used set of sparse matrix benchmarks collected from a wide range of applications. See the
  = link_to "about page", about_path, class: "alert-link"
  for more information.

<!-- Show warnings if cookies/javascript are disabled -->
%div{:id => "warnings"}
  %noscript
    WARNING: this site requires javascript to function! You will not be able to
    sort or filter the matrices without it.

.well.container-fluid
  .col-xs-2.column.text-center{style: "border-right: 1px solid #e3e3e3;"}
    %br
    .dropdown
      %button.btn.btn-default.dropdown-toggle{type: "button", id: "dropdownMenu1", 'data-toggle': "dropdown", 'aria-haspopup': "true", 'aria-expanded': "true" }
        %i.fa.fa-filter{'aria-hidden': "true"}
        Filters
        %i.fa.fa-caret-down{'aria-hidden': "true"}
      %ul.dropdown-menu{'aria-labelledby': 'dropdownMenu1'}
        %li
          %a.small{href: "", 'data-value': "option1", tabIndex: "-1"}
            %input.filter-checkbox.rows-checkbox{type: "checkbox", 'data-target': "#rows-filter"} &nbsp;Rows
        %li
          %a.small{href: "", 'data-value': "option2", tabIndex: "-1"}
            %input.filter-checkbox.columns-checkbox{type: "checkbox", 'data-target': "#columns-filter"} &nbsp;Columns
        %li
          %a.small{href: "", 'data-value': "option3", tabIndex: "-1"}
            %input.filter-checkbox.nonzeros-checkbox{type: "checkbox", 'data-target': "#nonzeros-filter"} &nbsp;Nonzeros
        %li
          %a.small{href: "", 'data-value': "option4", tabIndex: "-1"}
            %input.filter-checkbox.pattern-symmetry-checkbox{type: "checkbox", 'data-target': "#pattern-symmetry-filter"} &nbsp;Pattern Symmetry
        %li
          %a.small{href: "", 'data-value': "option5", tabIndex: "-1"}
            %input.filter-checkbox.numerical-symmetry-checkbox{type: "checkbox", 'data-target': "#numerical-symmetry-filter"} &nbsp;Numerical Symmetry
        %li
          %a.small{href: "", 'data-value':"option6", tabIndex: "-1"}
            %input.filter-checkbox.positive-definiteness-checkbox{type: "checkbox", 'data-target': "#positive-definiteness-filter"} &nbsp;Positive Definiteness
    %br
    = link_to 'Reset filters', reset_filterrific_url, class: "btn btn-default"
  <!-- Set up the filter form -->
  .col-xs-10.column.text-center{style: "margin-left: -1px; border-left: 1px solid #e3e3e3;"}
    = form_for_filterrific @filterrific do |f|
      #search.well.well-sm
        Search&nbsp;
        = f.text_field :search_query, class: 'filterrific-periodically-observed'
      #rows-filter.filter.well.well-sm
        = f.text_field :min_rows, class: 'filterrific-periodically-observed', id: 'filter-input-rows-min'
        &le; Number of Rows &le;
        = f.text_field :max_rows, class: 'filterrific-periodically-observed', id: 'filter-input-rows-max'
      #columns-filter.filter.well.well-sm
        = f.text_field :min_cols, class: 'filterrific-periodically-observed', id: 'filter-input-columns-min'
        &le; Number of Columns &le;
        = f.text_field :max_cols, class: 'filterrific-periodically-observed', id: 'filter-input-columns-max'
      #nonzeros-filter.filter.well.well-sm
        = f.text_field :min_nonzeros, class: 'filterrific-periodically-observed', id: 'filter-input-nonzeros-min'
        &le; Number of Nonzeros &le;
        = f.text_field :max_nonzeros, class: 'filterrific-periodically-observed', id: 'filter-input-nonzeros-max'
      #pattern-symmetry-filter.filter.well.well-sm
        = f.text_field :min_pattern_symmetry, class: 'filterrific-periodically-observed', id: 'filter-input-pattern_symmetry-min'
        &le; Pattern Symmetry &le;
        = f.text_field :max_pattern_symmetry, class: 'filterrific-periodically-observed', id: 'filter-input-pattern_symmetry-max'
      #numerical-symmetry-filter.filter.well.well-sm
        = f.text_field :min_numerical_symmetry, class: 'filterrific-periodically-observed', id: 'filter-input-numerical_symmetry-min'
        &le; Numerical Symmetry &le;
        = f.text_field :max_numerical_symmetry, class: 'filterrific-periodically-observed', id: 'filter-input-numerical_symmetry-max'
      .well.well-sm
        Sorted by
        = f.select :sorted_by, @filterrific.select_options[:sorted_by]

    = render_filterrific_spinner

#filterrific_results
  = render partial: 'matrices/list', locals: { matrices: @matrices }